<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prototype</title>
</head>
<body>
    <a href="/ejercicios/">Go Back</a>
    <p><em>Abre la consola</em></p>
    <script>
        //Un objeto común y corriente
       
       /* const zelda = {
            name:"zelda"
        }
        zelda.saludar=function(){
            console.log(`Hola soy ${this.name}`)
        }
        zelda.saludar();

        const link = {
            name:'Link',
        }
        link.saludar=function(){
            console.log(`Hola soy ${this.name}`)
        }
        link.saludar(); */
        //Seamos un poco mas eficientes
        /* function Hero(name){
            const hero ={
                name:name
            }
            hero.saludar = function(){
                console.log(`Hola soy ${this.name}`);
            };
            return hero;
        }

        const zelda = Hero('Zelda');
        zelda.saludar();

        const link = Hero('Link');
        link.saludar(); */
        //Aun podemos mejorar más y evitar tener que crear la misma función cada vez
        /*const heroMethods ={
            saludar: function(){
                console.log(`Me llamo ${this.name}`);
            },
        };
        function Hero(name){
            const hero ={
                name:name,
            };
            hero.saludar = heroMethods.saludar;
            return hero;
        }
        const zelda = Hero('Zelda');
        zelda.saludar();

        const link = Hero('Link');
        link.saludar(); */

        //object.create
        //const nuevoObjeto = Object.create(objeto)
       /* const heroMethods ={
            saludar: function(){
                console.log(`Soy súperHeroe ${this.name}`);
            },
        };
        function Hero(name){
            const hero = Object.create(heroMethods)
            hero.name = name;
            return hero;
        }
        const zelda = Hero('Zelda');
        zelda.saludar();

        const link = Hero('Link');
        link.saludar();*/
        //Los metodos de hero dentro de hero
        /*const heroMethods ={
            saludar: function(){
                console.log(`Soy súperHeroe ${this.name}`);
            },
        };*/
        /*function Hero(name){
            const hero = Object.create(Hero.prototype);
            hero.name = name;
            return hero;
        }
        Hero.prototype.saludar = function(){
            console.log(`Soy súper Heroe ${this.name}`);
        }
        const zelda = Hero('Zelda');
        zelda.saludar();

        const link = Hero('Link');
        link.saludar();*/

        // new es un atajo(azucar sintactica) para llevar Hero.prototype al objeto
        function Hero(name){
            //this = Object.create(Hero.prototype);
            this.name = name;
            //return this;
        }
        Hero.prototype.saludar = function(){
            console.log(`New: ${this.name}`);
        }
        const zelda = new Hero('Zelda');
        zelda.saludar();

        const link =new Hero('Link');
        link.saludar();
        //propiedades de la instancia
        console.log('Name:', zelda.name);
        //propiedades de la clase
        console.log('Saludar:', zelda.saludar);
        //propiedades heredadas ejm: toString
        console.log('toString:', zelda.toString);
        //hasOwnProperty (de donde sale toString o esto?)
        console.log(
            'zelda.hasOwnProperty("saludar"):',
             zelda.hasOwnProperty('saludar')
        );
        //Inspeccionemos el prototipo del zelda
        //Inspeccionemos el prototipo del Hero
        //Inspeccionemos el prototipo del Object


    </script>
</body>
</html>